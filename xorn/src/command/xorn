#!/usr/bin/env python3
# Copyright (C) 2013-2020 Roland Lutz
# GNU General Public License v2 or later

import getopt
import gettext
import importlib.util
import os
import sys
from gettext import gettext as _

pyexecdir = '/Users/johnryan/src/geda-ai/xorn/built-packages'
commanddir = '/Users/johnryan/src/geda-ai/xorn/src/command'

sys.path.insert(0, pyexecdir)
import xorn.command
import xorn.config

def main():
    gettext.bindtextdomain(xorn.config.PACKAGE, xorn.config.localedir)
    gettext.textdomain(xorn.config.PACKAGE)

    try:
        options, args = getopt.getopt(
            xorn.command.args, '', ['help', 'version'])
    except getopt.GetoptError as e:
        xorn.command.invalid_arguments(e.msg)

    for option, value in options:
        if option == '--help':
            sys.stdout.write(_(
                "Usage: %s COMMAND [ARGS]...\n"
                "       %s --help\n"
                "       %s --version\n") % (
                    xorn.command.program_name,
                    xorn.command.program_name,
                    xorn.command.program_name))
            sys.stdout.write("\n")
            sys.stdout.write(_("  Valid commands are:\n\n"))
            sys.stdout.write(_("    convert\n        Convert files from one file format to another.\n\n"))
            sys.stdout.write(_("    extract\n        Extract objects embedded in a schematic into a separate file.\n\n"))
            sys.stdout.write(_("    find-symbol-by-pinout\n        Find symbols in a directory matching a given pinout.\n\n"))
            sys.stdout.write(_("    netlist\n        Generate a netlist from one or more gEDA schematic files.\n\n"))
            sys.stdout.write(_("    For more information about an individual command, type:\n      `%s COMMAND --help'\n") % xorn.command.program_name)
            sys.stdout.write("\n")
            sys.stdout.write(_("  Command-line options:\n      --help            give this help\n      --version         display version number\n\n"))
            sys.stdout.write(_("Report %s bugs to %s\n") % (
                xorn.config.PACKAGE_NAME,
                xorn.config.PACKAGE_BUGREPORT))
            sys.exit(0)

        if option == '--version':
            xorn.command.core_version()

    if not args:
        xorn.command.invalid_arguments(_("No command name given."))

    short_name = 'xorn-' + args[0]
    module_file = os.path.join(commanddir, args[0] + '.py')

    if os.path.exists(module_file):
        spec = importlib.util.spec_from_file_location(short_name, module_file)
        module = importlib.util.module_from_spec(spec)
        try:
            spec.loader.exec_module(module)
        except Exception as e:
            sys.stderr.write(_("`%s' failed to load.\n") % short_name)
            sys.stderr.write(_("This is an error.  Please report it to %s\n\n") % xorn.command.bugreport)
            import traceback
            traceback.print_exc()
            sys.exit(99)
    else:
        for path in os.environ['PATH'].split(':'):
            fn = os.path.join(path, short_name)
            if os.path.exists(fn):
                try:
                    os.execl(fn, fn, *args[1:])
                except OSError as e:
                    sys.stderr.write(_("%s: %s: %s\n") % (
                        xorn.command.program_short_name, fn, e.strerror))
                    sys.exit(1)
        xorn.command.invalid_arguments(
            _("`%s' is not a xorn command.") % args[0])

    xorn.command.program_name += ' ' + args[0]
    xorn.command.program_short_name = short_name
    xorn.command.args = args[1:]

    try:
        if hasattr(module, 'main'):
            module.main()
    except (SystemExit, KeyboardInterrupt):
        raise
    except Exception:
        sys.stderr.write(_("`%s' raised an uncaught exception.\n") % short_name)
        sys.stderr.write(_("This is an error.  Please report it to %s\n\n") % xorn.command.bugreport)
        import traceback
        traceback.print_exc()
        sys.exit(99)

if __name__ == '__main__':
    main()
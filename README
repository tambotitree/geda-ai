## 1. Forward

I used to love and use this software all the time. What makes it amazing for LLM use is that the files are in ASCII format so the LLMs can generate files interactively with the user. But, let's be honest — no one has been working on it, so I am resurrecting the code. All mistakes are mine, but if you want to join in on the journey, please feel free. It will always be under GNU copyright, and I want to acknowledge the hard work that made this possible, so I have included the original README below.

— John Ryan of Aquana.bio

## 2. Introduction

gEDA-AI is a modern resurrection of the gEDA tool suite, now enhanced to support AI-powered circuit design and analysis workflows. This toolkit empowers users to generate, manipulate, and analyze electronic design files using natural language prompts, LLMs, and a traditional graphical interface.

While rooted in the original gEDA/gaf toolchain, gEDA-AI extends its utility by supporting interactive workflows between humans and AI, allowing a user to type:

> "Create a DO sensor with a TPM chip and give me a BOM and .schem file."

...and get a usable design in seconds.

We are improving support for modern systems like macOS and Conda Python environments while preserving GNU/Linux roots. Contributions are welcome!

## 3. Tools in the gEDA-AI Suite

gEDA-AI continues to provide the full gEDA schematic and netlist flow, with several enhancements:

### `libgeda`

A library of functions for manipulating gEDA schematics and symbols.

### `gschem`

A GTK-based schematic editor.

### `gattrib`

A spreadsheet-like bulk attribute editor.

### `gnetlist`

Generates netlists for over 20 PCB and simulation formats.

### `gsch2pcb`

A CLI tool to streamline workflows from schematic to PCB.

### `gsymcheck`

Validates symbol files.

### `gaf`

A command-line wrapper for various gEDA tools and Scheme-based scripting.

### `xorn`

A Python-powered command-line utility for parsing and transforming gEDA schematics.

### `gedai/chat_with_geda.py`

An AI assistant that integrates natural language input with design generation.

## 4. Installing gEDA-AI

gEDA-AI is still under active development and is best built from source. However, quick-install options are emerging.

### 4.1 macOS with Homebrew

```bash
brew install --HEAD tambotitree/geda/geda-ai
```

### 4.2 Ubuntu/Debian with apt-get

```bash
sudo apt-get update
sudo apt-get install geda-ai
```

### 4.3 Linux (Other Distros) with wget

If you use WSL on Windows, or another Linux distribution:

```bash
wget https://github.com/tambotitree/geda-ai/archive/refs/heads/main.zip
unzip main.zip && cd geda-ai-main
```

You can then follow the build instructions in Section 5.

### 4.4 Getting Started with AI Commands

Once installed, you can launch the AI assistant:

```bash
python gedai/chat_with_geda.py
```

This tool allows you to enter natural-language queries like:

> "Design a DO sensor with a TMP chip and give me a BOM and schematic."

and receive AI-generated design files.

## 5. Building and Installing gEDA-AI from Source

Building gEDA-AI from source gives you full control over its features and ensures compatibility with your platform (macOS, Linux, etc.). This section walks you through acquiring the source, preparing dependencies, and building the tools.

### 5.1 Cloning the Repository

You can obtain the latest source from the `geda-ai` GitHub repository:

```bash
git clone https://github.com/tambotitree/geda-ai.git
cd geda-ai
```

### 5.2 Setting Up Python Environment

`geda-ai` depends on Python 3.6 or higher and a few essential libraries. We recommend using a virtual environment via `conda` or `venv` to isolate dependencies:

#### Using Conda

```bash
conda create -n geda-ai-env python=3.12
conda activate geda-ai-env
pip install -r requirements.txt  # (if present)
```

Ensure the environment's Python is visible to autotools:

```bash
export PYTHON=$(which python3)
```

### 5.3 Bootstrapping the Build System

If you cloned the repo, you'll need to bootstrap the `configure` script before building:

```bash
./bootstrap.sh
```

This step prepares the `configure` script, macro files, and Makefiles for building on your machine. Once stabilized, this script will be renamed to `autogen.sh`.

### 5.4 Configuring the Build

To configure the build for a local install in `$HOME/geda`, run:

```bash
./configure --prefix=$HOME/geda
```

This will detect all required libraries and generate Makefiles. If a dependency is missing (such as Guile or GTK), the script will report it.

If you’re on macOS and using Homebrew:

```bash
export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig"
```

You may also need:

```bash
export LDFLAGS="-L/opt/homebrew/lib"
export CPPFLAGS="-I/opt/homebrew/include"
```

### 5.5 Building and Installing

To compile the suite:

```bash
make -j$(nproc)
```

And to install:

```bash
make install
```

Add the binaries to your `PATH`:

```bash
export PATH="$HOME/geda/bin:$PATH"
```

Test it by launching:

```bash
gschem
```

If everything went well, you now have a working installation of gEDA-AI including modernized tools and experimental AI integration!

## 6. Using the Tools

Once gEDA-AI is installed, you can begin using the core tools:

### 6.1 Schematic Capture

Launch the graphical schematic editor:

```bash
gschem
```

Use the GUI to place symbols, wire components, and annotate your design.

### 6.2 Netlist Generation

Use gnetlist to create a PCB or simulation netlist:

```bash
gnetlist -g bom2 -o bom.txt your_design.sch
```

This generates a bill of materials.

### 6.3 Attribute Editing

Bulk-edit attributes across your design:

```bash
gattrib your_design.sch
```

### 6.4 Running the AI Assistant

Generate new circuits using:

```bash
python gedai/chat_with_geda.py
```

### 6.5 Converting and Extracting

Use `xorn` for command-line transformations:

```bash
xorn your_design.sch --output-format=svg
```

## 7. Extending and Contributing

We welcome contributors of all kinds:

* Help modernize the codebase (Python 3, Guile 3, GTK 3/4)
* Write new macros for autotools
* Improve documentation or translations
* Add new AI templates and prompts

To contribute:

1. Fork the repo on GitHub
2. Create a feature branch
3. Submit a pull request

See `CONTRIBUTING.md` for details.

## 8. Developer Internals and Architecture

gEDA-AI is divided into several interlocking modules:

* `src/`: Core C and Scheme source code for traditional tools
* `xorn/`: Python-based schematic interpreter
* `gedai/`: Experimental AI assistant logic
* `m4/`: Autotools macros including Python environment detection

Build configuration is managed through autotools. Eventually, AI prompts will be managed using a plug-in architecture under `gedai/plugins`.

This section will expand as tools are added and stabilized.
